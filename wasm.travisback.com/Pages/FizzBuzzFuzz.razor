<!--------------------------------------------------------------------------------
    File: FizzBuzzFuzz.razor

    Description: This Razor component demonstrates the FizzBuzzFuzz algorithm for
                 numbers 1 to 100. It calculates a byte of 8 bits for each number
                 based on divisibility rules and displays the result in an HTML table.

    Author: Travis Back

    Created: 2024-01-28

    Last Modified: 2024-01-28

    Notes:
    - This component illustrates the FizzBuzzFuzz algorithm.
------------------------------------------------------------------------------->
@page "/fizzbuzzfuzz"

<h3>FizzBuzzFuzz</h3>
<p>
    This Razor component demonstrates the FizzBuzzFuzz algorithm for<br />
    numbers 1 to 100. For each number, it calculates a byte of 8 bits based on<br />
    divisibility rules by numbers 2, 3, and 4, and displays the result in an HTML table.
</p>


<!-- Styling for the table -->
<style>
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }
</style>

<!-- Table to display FizzBuzzFuzz results -->
<table>
    <thead>
        <tr>
            <th>Number</th>
            <th>Binary</th>
            <th>Result</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var result in FBFResults)
        {
            <tr>
                <td>@result.Number</td>
                <td>@result.Binary</td>
                <td>@result.Result</td>
            </tr>
        }
    </tbody>
</table>

@code {
    // Data structure to store FizzBuzzFuzz results
    public class FBFResult
    {
        public int Number { get; set; }
        public string Binary { get; set; }
        public int Decimal { get; set; }
        public string Result { get; set; }
    }

    // List to store FizzBuzzFuzz results
    private List<FBFResult> FBFResults = new List<FBFResult>();

    // Lifecycle Method: Called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        await FBF(); // Call the FizzBuzzFuzz method
    }

    // Method: Implements the FizzBuzzFuzz algorithm and populates the results list
    private async Task FBF()
    {
        // Loop through numbers 1 to 100
        for (int i = 1; i <= 100; i++)
        {
            // Initialize a byte to represent divisibility by 2 to 9
            byte bankOf8Bits = 0b0000_0000;
            string result = "";

            // Set the corresponding bit if the number is divisible by the given factor
            if (i % 2 == 0) bankOf8Bits |= 1 << 0;
            if (i % 3 == 0) bankOf8Bits |= 1 << 1;
            if (i % 4 == 0) bankOf8Bits |= 1 << 2;
            /*
            if (i % 5 == 0) bankOf8Bits |= 1 << 3;
            if (i % 6 == 0) bankOf8Bits |= 1 << 4;
            if (i % 7 == 0) bankOf8Bits |= 1 << 5;
            if (i % 8 == 0) bankOf8Bits |= 1 << 6;
            if (i % 9 == 0) bankOf8Bits |= 1 << 7;
            */

            // Build the result string based on set bits in the byte
            if ((bankOf8Bits & 1) == 1) result += "Fizz";
            if (((bankOf8Bits >> 1) & 1) == 1) result += "Buzz";
            if (((bankOf8Bits >> 2) & 1) == 1) result += "Fuzz";

            // Add the result to the list
            FBFResults.Add(new FBFResult
                {
                    Number = i,
                    Binary = Convert.ToString(bankOf8Bits, 2).PadLeft(8, '0'),
                    Decimal = bankOf8Bits,
                    Result = result
                });
        }
    }
}
